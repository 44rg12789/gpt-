#!/bin/bash

command -v grid-config >/dev/null 2>&1 || { echo >&2 "There seems to be a problem with the Grid installation. grid-config not found. Aborting."; exit 1; }

NPARALLEL=4

# Start
N=0

mkdir -p build logs

echo "================================================================================"
echo "  Compiling CGPT against Grid in $(grid-config --prefix)"
echo "================================================================================"

CXX="$(grid-config --cxx)"
CXXFLAGS="$(grid-config --cxxflags) $(python3-config --includes) -I$(python -c 'import numpy as np;print(np.get_include())')"
LDFLAGS="$(grid-config --ldflags) $(python3-config --ldflags)"
LIBS="$(grid-config --libs) $(python3-config --libs)"


echo "CXX = $CXX"
echo "CXXFLAGS = $CXXFLAGS"
echo "LDFLAGS = $LDFLAGS"
echo "LIBS = $LIBS"

echo "================================================================================"

# Automatically generate list of exported functions
(
    echo "// This file is automatically generated, do not modify!"
    sed -n 's/EXPORT(\([^,{]*\),{/EXPORT_FUNCTION(\1)/p' lib/*.cc
) > lib/exports.h
echo "Found $(grep -c EXPORT lib/exports.h) exported functions"

# if exports changed, re-compile lib.o
if [ -f lib/exports.h~ ];
then
    diff lib/exports.h lib/exports.h~ > /dev/null
    if [[ "$?" != "0" ]];
    then
    rm -f build/lib.o
    fi
fi
cp lib/exports.h lib/exports.h~

# Automatically generate interface for exported fermion operators
(
    echo "// This file is automatically generated, do not modify!"
    sed '1,/BEGIN_EXPORT_UNARY_REALD/d;/END_EXPORT_UNARY_REALD/,$d' lib/operators/types.h |
    awk '{ print "UNOP_REALD(" $1 "," NR + 1000 ")" }'
    sed '1,/BEGIN_EXPORT_UNARY_VOID/d;/END_EXPORT_UNARY_VOID/,$d' lib/operators/types.h |
    awk '{ print "UNOP_VOID(" $1 "," NR + 2000 ")" }'
) > lib/operators/register.h

(
    echo "# warning, this file is automatically generated, do not modify!"
    echo "def register(op):"
    sed '1,/BEGIN_EXPORT_UNARY_REALD/d;/END_EXPORT_UNARY_REALD/,$d' lib/operators/types.h |
    awk '{ print "  op." $1 " = lambda inp, out: op.unary(" NR + 1000 ",inp,out)" }'
    sed '1,/BEGIN_EXPORT_UNARY_VOID/d;/END_EXPORT_UNARY_VOID/,$d' lib/operators/types.h |
    awk '{ print "  op." $1 " = lambda inp, out: op.unary(" NR + 2000 ",inp,out)" }'
) > ../gpt/qcd/fermion/register.py

# Compile
for src in lib/*.cc
do
    bn=$(basename $src .cc)
    dst=build/${bn}.o
    if [ $src -nt $dst ];
    then
    (
        echo " [CXX] $bn"
        start=$SECONDS
        ${CXX} --shared ${CXXFLAGS} -c $src -o $dst 1> logs/${bn}.out 2> logs/${bn}.err
        success=$?
        elapsed=$((SECONDS-start))
        if [[ "$success" == "0" ]];
        then
        printf "%-50s %s\n" " [OK ] $bn " "($elapsed s)"
        else
        printf "%-50s %-30s %s\n" " [ERR] $bn " "($elapsed s)" "logs/${bn}.err"
        fi
    ) &
    N=$((N+1))
    if ((N==NPARALLEL))
    then
        wait
        N=0
    fi
    fi
done

cat logs/*.err

wait

# Link
${CXX} --shared build/*.o ${LDFLAGS} ${LIBS} -lGrid -o ../cgpt.so
