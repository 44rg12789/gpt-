name: Build gpt

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-18.04

    strategy:
      matrix:
        python-version: ['3.6', '3.7', '3.8']
        compiler: ['gcc', 'clang']

    env:
      MAKE_BUILD_FLAGS: -j2
      GRID_REPOSITORY_REF: feature/gpt

    steps:
    - name: Install Ubuntu packages
      run: |
        sudo apt-get install -y cmake clang-9 libmpfr-dev libgmp-dev libssl-dev zlib1g-dev

    - name: Set Compiler Variables GCC
      if: matrix.compiler == 'gcc'
      run: |
        echo '::set-env name=CC::gcc'
        echo '::set-env name=CXX::g++'

    - name: Set Compiler Variables CLANG
      if: matrix.compiler == 'clang'
      run: |
        echo '::set-env name=CC::clang-9'
        echo '::set-env name=CXX::clang++-9'

    - name: Clone C-LIME
      uses: actions/checkout@v2
      with:
        repository: usqcd-software/c-lime
        path: c-lime

    - name: Build and install C-LIME
      run: cd c-lime && ./autogen.sh && ./configure && make ${MAKE_BUILD_FLAGS} && sudo make install

    - name: Clone Grid for cache check
      uses: actions/checkout@v2
      with:
        repository: lehner/Grid
        ref: ${{ env.GRID_REPOSITORY_REF }}
        path: Grid

    - name: Get grid cache key
      id: grid-version
      run: |
        cd Grid && ./bootstrap.sh
        mkdir -p build && cd build
        ../configure CXXFLAGS=-fPIC --enable-precision=double --enable-simd=AVX --enable-comms=none
        cd Grid && make version-cache Version.h
        echo "::set-output name=key::$(sha256sum version-cache|cut -f 1 -d " ")"

    - uses: actions/cache@v1
      id: grid-build-cache
      with:
        path: Grid
        key: ${{ runner.os }}-${{ matrix.compiler }}-${{ steps.grid-version.outputs.key }}

    - name: Build Grid
      if: steps.grid-build-cache.outputs.cache-hit != 'true'
      run: |
        cd Grid/build/Grid
        make ${MAKE_BUILD_FLAGS}

    - name: Install Grid
      run: |
        cd Grid/build
        sudo install -D -m755 grid-config /usr/bin/grid-config || return 1
        cd Grid
        sudo make ${MAKE_BUILD_FLAGS} install

    - name: Clone gpt
      uses: actions/checkout@v2
      with:
        path: gpt

    - name: Setup python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64

    - name: Setup python dependencies
      run: |
        pip install numpy

    - name: Build cgpt
      run: |
        cd gpt/lib/cgpt
        python --version
        cp ../../.github/make_cgpt.sh . && ./make_cgpt.sh

    - name: Run scalar test
      run: |
        cd gpt
        export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${GITHUB_WORKSPACE}/gpt/lib
        source scripts/source.sh
        echo ${PYTHONPATH}
        python ./tests/core/scalar.py
