#!/bin/bash
GRID=/sdcc/u/clehner/Grid/build
NPARALLEL=8
N=0

mkdir -p build

echo "================================================================================"
echo "  Compiling CGPT against Grid in ${GRID}"
echo "================================================================================"

CXX=$(grep "GRID_CXX " ${GRID}/Makefile | sed "s/^[^=]*=//")
CXXFLAGS="$(grep "GRID_CXXFLAGS " ${GRID}/Makefile | sed "s/^[^=]*=//") $(grep "AM_CFLAGS " ${GRID}/Makefile | sed "s/^[^=]*=//") -I${GRID}/Grid"
LDFLAGS="$(grep "GRID_LDFLAGS " ${GRID}/Makefile | sed "s/^[^=]*=//") $(grep "AM_LDFLAGS " ${GRID}/Makefile | sed "s/^[^=]*=//")"
LIBS=$(grep "GRID_LIBS " ${GRID}/Makefile | sed "s/^[^=]*=//")

echo "CXX = $CXX"
echo "CXXFLAGS = $CXXFLAGS"
echo "LDFLAGS = $LDFLAGS"
echo "LIBS = $LIBS"

echo "================================================================================"

# Automatically generate list of exported functions
(
    echo "// This file is automatically generated, do not modify!" 
    sed -n 's/EXPORT(\([^,{]*\),{/EXPORT_FUNCTION(\1)/p' lib/*.cc 
) > lib/exports.h
echo "Found $(grep -c EXPORT lib/exports.h) exported functions"

# Automatically generate interface for exported fermion operators
(
    echo "// This file is automatically generated, do not modify!" 
    sed '1,/BEGIN_EXPORT_UNARY_REALD/d;/END_EXPORT_UNARY_REALD/,$d' lib/operators/types.h |
    awk '{ print "UNOP_REALD(" $1 "," NR + 1000 ")" }' 
    sed '1,/BEGIN_EXPORT_UNARY_VOID/d;/END_EXPORT_UNARY_VOID/,$d' lib/operators/types.h |
    awk '{ print "UNOP_VOID(" $1 "," NR + 2000 ")" }' 
) > lib/operators/register.h

(
    echo "# warning, this file is automatically generated, do not modify!"
    echo "def register(op):"
    sed '1,/BEGIN_EXPORT_UNARY_REALD/d;/END_EXPORT_UNARY_REALD/,$d' lib/operators/types.h |
    awk '{ print "  op." $1 " = lambda inp, out: op.unary(" NR + 1000 ",inp,out)" }' 
    sed '1,/BEGIN_EXPORT_UNARY_VOID/d;/END_EXPORT_UNARY_VOID/,$d' lib/operators/types.h |
    awk '{ print "  op." $1 " = lambda inp, out: op.unary(" NR + 2000 ",inp,out)" }' 
) > ../gpt/qcd/fermion/register.py


# Compile
for src in lib/*.cc
do
    bn=$(basename $src .cc)
    dst=build/${bn}.o
    if [ $src -nt $dst ];
    then
	(
	    echo "Compiling $bn ..."
	    time ${CXX} --shared -fPIC -O3 $(python3-config --includes) ${CXXFLAGS} -c $src -o $dst
	    echo "$bn complete"
	) &
	N=$((N+1))
	if ((N==NPARALLEL))
	then
	    wait
	    N=0
	fi
    fi
done

wait

# Link
${CXX} --shared -fPIC -O3 build/*.o ${LDFLAGS} ${LIBS} -lGrid -o ../cgpt.so
